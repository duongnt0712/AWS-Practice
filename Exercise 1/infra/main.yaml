Description: Exercise 1 - CloudFormation template. It deploys a VPC, with a set of public and private subnets spread across 3 AZs

Parameters:
  ProjectName:
    Description: A project name that is prefixed to resource names
    Type: String

  EnvironmentName:
    Description: An environment name that is prefixed to resource names
    Type: String
    Default: Development
    AllowedValues:
      - Production
      - Development
    
  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.0.0.0/16

  PublicSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 10.0.0.0/24

  PublicSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
    Type: String
    Default: 10.0.1.0/24

  PublicSubnet3CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the third Availability Zone
    Type: String
    Default: 10.0.2.0/24

  PublicSubnet4CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the forth Availability Zone
    Type: String
    Default: 10.0.3.0/24

  PublicSubnet5CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the fifth Availability Zone
    Type: String
    Default: 10.0.4.0/24

  PublicSubnet6CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the sixth Availability Zone
    Type: String
    Default: 10.0.5.0/24

  PrivateSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    Default: 10.0.6.0/24

  PrivateSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
    Type: String
    Default: 10.0.7.0/24

  PrivateSubnet3CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the third Availability Zone
    Type: String
    Default: 10.0.8.0/24

Resources:
  # VPC
  VPC: 
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${EnvironmentName}-VPC
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Application
          Value: !Ref ProjectName

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${EnvironmentName}-InternetGateway
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Application
          Value: !Ref ProjectName

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # Public Subnets
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties: 
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet1CIDR
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      MapPublicIpOnLaunch: true # instances launched into the subnet automatically receive a public IP address upon launch
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${EnvironmentName}-Public Subnet (AZ1)
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Application
          Value: !Ref ProjectName

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties: 
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet2CIDR
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${EnvironmentName}-Public Subnet (AZ2)
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Application
          Value: !Ref ProjectName

  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties: 
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet3CIDR
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${EnvironmentName}-Public Subnet (AZ3)
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Application
          Value: !Ref ProjectName

  PublicSubnet4:
    Type: AWS::EC2::Subnet
    Properties: 
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet4CIDR
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${EnvironmentName}-Public Subnet (AZ4)
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Application
          Value: !Ref ProjectName

  PublicSubnet5:
    Type: AWS::EC2::Subnet
    Properties: 
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet5CIDR
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${EnvironmentName}-Public Subnet (AZ5)
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Application
          Value: !Ref ProjectName

  PublicSubnet6:
    Type: AWS::EC2::Subnet
    Properties: 
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet6CIDR
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${EnvironmentName}-Public Subnet (AZ6)
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Application
          Value: !Ref ProjectName

  # Private Subnets
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties: 
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet1CIDR
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${EnvironmentName}-Private Subnet (AZ1)
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Application
          Value: !Ref ProjectName

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties: 
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet2CIDR
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${EnvironmentName}-Private Subnet (AZ2)
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Application
          Value: !Ref ProjectName

  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties: 
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet3CIDR
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${EnvironmentName}-Private Subnet (AZ3)
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Application
          Value: !Ref ProjectName

  # Route Table for Public Subnets
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${EnvironmentName}-Public Routes
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Application
          Value: !Ref ProjectName

  # Public Route to Internet
  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PublicSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet3

  PublicSubnet4RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet4

  PublicSubnet5RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet5

  PublicSubnet6RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet6

  # NAT Gateway for Private Subnets
  NatGateway1EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${EnvironmentName}-NatGateway1EIP
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Application
          Value: !Ref ProjectName

  NatGateway2EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${EnvironmentName}-NatGateway2EIP
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Application
          Value: !Ref ProjectName

  NatGateway3EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${EnvironmentName}-NatGateway3EIP
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Application
          Value: !Ref ProjectName

  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway1EIP.AllocationId
      SubnetId: !Ref PublicSubnet4
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${EnvironmentName}-NatGateway1
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Application
          Value: !Ref ProjectName

  NatGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway2EIP.AllocationId
      SubnetId: !Ref PublicSubnet5
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${EnvironmentName}-NatGateway2
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Application
          Value: !Ref ProjectName

  NatGateway3:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway3EIP.AllocationId
      SubnetId: !Ref PublicSubnet6
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${EnvironmentName}-NatGateway3
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Application
          Value: !Ref ProjectName

  # Private Route Table
  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${EnvironmentName}-Private Routes (AZ1)
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Application
          Value: !Ref ProjectName

  # Private Route for Outbound Internet through NAT Gateway
  DefaultPrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${EnvironmentName}-Private Routes (AZ2)
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Application
          Value: !Ref ProjectName

  DefaultPrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2

  PrivateRouteTable3:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${EnvironmentName}-Private Routes (AZ3)
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Application
          Value: !Ref ProjectName

  DefaultPrivateRoute3:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable3
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway3

  PrivateSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable3
      SubnetId: !Ref PrivateSubnet3

  # Security Group for the ALB
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Allow HTTP and HTTPS traffic to the ALB
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${EnvironmentName}-ALBSecurityGroup
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Application
          Value: !Ref ProjectName

  # Application Load Balancer (ALB)
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
        - !Ref PublicSubnet3
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Scheme: internet-facing
      IpAddressType: ipv4
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${EnvironmentName}-ApplicationLoadBalancer
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Application
          Value: !Ref ProjectName

  # Target Group for ECS
  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VPC
      Port: 8080
      Protocol: HTTP
      TargetType: ip
      HealthCheckProtocol: HTTP
      HealthCheckPath: /
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${EnvironmentName}-ALBTargetGroup
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Application
          Value: !Ref ProjectName

  # ALB Listener for HTTP
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

  # WAFv2 Web ACL
  WAFWebACL:
    Type: AWS::WAFv2::WebACL
    Properties:
      DefaultAction:
        Allow: {}  # Allow all by default unless blocked by a rule
      Scope: REGIONAL 
      VisibilityConfig:
        CloudWatchMetricsEnabled: true
        MetricName: WAFWebACL
        SampledRequestsEnabled: true
      Rules:
        - Name: 'AWSManagedRulesCommonRuleSet' #against common threats: SQL injection, cross-site scripting, and more.
          Priority: 1
          OverrideAction:
            None: {}
          Statement:
            ManagedRuleGroupStatement:
              VendorName: 'AWS'
              Name: 'AWSManagedRulesCommonRuleSet'
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: 'AWSManagedRulesCommonRuleSet'

        - Name: 'AWSManagedRulesBotControlRuleSet' #against bots that could be part of a DDoS attack.
          Priority: 2
          OverrideAction:
            None: {}
          Statement:
            ManagedRuleGroupStatement:
              VendorName: 'AWS'
              Name: 'AWSManagedRulesBotControlRuleSet'
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: 'AWSManagedRulesBotControlRuleSet'

        - Name: 'RateLimitRule' # Blocks requests from any single IP address that exceeds a defined request rate 
          Priority: 3
          Action:
            Block: {}
          Statement:
            RateBasedStatement:
              Limit: 1000 #1000 requests within a 5-minute period
              AggregateKeyType: IP
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: 'RateLimitRule'
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${EnvironmentName}-WAFWebACL
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Application
          Value: !Ref ProjectName

  # Associate the WAF Web ACL with the ALB
  WebACLAssociation:
    Type: AWS::WAFv2::WebACLAssociation
    Properties:
      ResourceArn: !Ref ApplicationLoadBalancer
      WebACLArn: !GetAtt WAFWebACL.Arn
  
  # VPC Endpoint for ECR DKR (Docker image) service
  EcrDkrVpcEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ecr.dkr
      VpcEndpointType: Interface
      SubnetIds: 
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
        - !Ref PrivateSubnet3
      SecurityGroupIds: 
        - !Ref EndpointSecurityGroup

  # Security Group for the VPC Endpoints
  EndpointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow access to ECR via PrivateLink
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${EnvironmentName}-EndpointSecurityGroup
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Application
          Value: !Ref ProjectName

  # ECS
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${EnvironmentName}-ECSCluster
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Application
          Value: !Ref ProjectName

  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security group for ECS tasks"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          #TODO:
          SourceSecurityGroupId: !Ref ALBSecurityGroup  # Allow traffic from the ALB
      # SecurityGroupEgress:
      #   - IpProtocol: -1  # Allow all outbound traffic
      #     CidrIp: 0.0.0.0/0    
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${EnvironmentName}-ECSSecurityGroup
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Application
          Value: !Ref ProjectName

  ECSServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub ${ProjectName}-${EnvironmentName}-ECSServicePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - ecr:GetAuthorizationToken
                Resource: "*"
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${EnvironmentName}-ECSServiceRole
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Application
          Value: !Ref ProjectName

  ECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${ProjectName}-${EnvironmentName}-ECSTask
      NetworkMode: awsvpc
      ExecutionRoleArn: !Ref ECSServiceRole
      ContainerDefinitions:
        - Name: nginx
          Image: public.ecr.aws/nginx/nginx:stable-perl
          Memory: 512
          Cpu: 256
          PortMappings:
            - ContainerPort: 8080
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${EnvironmentName}-ECSService
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Application
          Value: !Ref ProjectName

  ECSService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref ECSTaskDefinition
      LoadBalancers:
        - TargetGroupArn: !Ref ALBTargetGroup
          ContainerName: nginx
          ContainerPort: 8080
      DesiredCount: 2
      # Role: !Ref ECSServiceRole
      NetworkConfiguration: 
        AwsvpcConfiguration:
          Subnets:
            - !Ref PrivateSubnet1
            - !Ref PrivateSubnet2
            - !Ref PrivateSubnet3
          SecurityGroups:
            - !Ref ECSSecurityGroup
          AssignPublicIp: DISABLED
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${EnvironmentName}-ECSService
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Application
          Value: !Ref ProjectName

  # ECSAutoScalingGroup:
  #   Type: "AWS::AutoScaling::AutoScalingGroup"
  #   Properties:
  #     VPCZoneIdentifier:
  #       - !Ref PublicSubnet1
  #       - !Ref PublicSubnet2
  #       - !Ref PublicSubnet3
  #     LaunchConfigurationName: !Ref ECSLaunchConfiguration
  #     MinSize: 1
  #     MaxSize: 3
  #     DesiredCapacity: 2
  #     Tags:
  #       - Key: Name
  #         Value: !Sub ${ProjectName}-${EnvironmentName}-ECSAutoScalingGroup
  #         PropagateAtLaunch: true
  #       - Key: Environment
  #         Value: !Ref EnvironmentName
  #         PropagateAtLaunch: true
  #       - Key: Application
  #         Value: !Ref ProjectName
  #         PropagateAtLaunch: true

  # ECSLaunchConfiguration:
  #   Type: AWS::AutoScaling::LaunchConfiguration
  #   Properties:
  #     InstanceType: t3.micro 
  #     ImageId: Fn::Sub: {{resolve:ssm:/aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id}}
  #     IamInstanceProfile: !Ref ECSInstanceProfile
  #     SecurityGroups:
  #       - !Ref ECSSecurityGroup
  #     UserData:
  #       Fn::Base64: !Sub |
  #         #!/bin/bash
  #         echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config
  #         echo ECS_ENABLE_CONTAINER_METADATA=true >> /etc/ecs/ecs.config
  #     AssociatePublicIpAddress: true

Outputs:
  VPCId:
    Description: "VPC ID"
    Value: !Ref VPC
  PublicSubnet1Id:
    Description: "PublicSubnet1 ID"
    Value: !Ref PublicSubnet1
  PublicSubnet2Id:
    Description: "PublicSubnet2 ID"
    Value: !Ref PublicSubnet2
  PublicSubnet3Id:
    Description: "PublicSubnet3 ID"
    Value: !Ref PublicSubnet3
  PublicSubnet4Id:
    Description: "PublicSubnet4 ID"
    Value: !Ref PublicSubnet4
  PublicSubnet5Id:
    Description: "PublicSubnet5 ID"
    Value: !Ref PublicSubnet5
  PublicSubnet6Id:
    Description: "PublicSubnet6 ID"
    Value: !Ref PublicSubnet6
  PrivateSubnet1Id:
    Description: "PrivateSubnet1 ID"
    Value: !Ref PrivateSubnet1
  PrivateSubnet2Id:
    Description: "PrivateSubnet2 ID"
    Value: !Ref PrivateSubnet2
  PrivateSubnet3Id:
    Description: "PrivateSubnet3 ID"
    Value: !Ref PrivateSubnet3
  LoadBalancerDNSName:
    Description: "Application Load Balancer DNS Name"
    Value: !GetAtt ApplicationLoadBalancer.DNSName
  # Since this is single CloudFormation stack, no need to reference the ApplicationLoadBalancer.LoadBalancerArn to anywhere else
  WebACLArn:
    Description: "WebACL ARN"
    Value: !GetAtt WAFWebACL.Arn
  ALBSecurityGroupId:
    Description: "ALB Security Group ID"
    Value: !Ref ALBSecurityGroup
    
  